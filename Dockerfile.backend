# Multi-stage build for FastAPI backend
FROM python:3.11-slim as builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Production stage
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security first
RUN useradd --create-home --shell /bin/bash app

# Copy Python packages from builder stage to app user directory
COPY --from=builder /root/.local /home/app/.local
RUN chown -R app:app /home/app/.local

# Copy application code and all necessary directories
COPY src/ ./src/
COPY models/ ./models/
COPY onnx_models/ ./onnx_models/
COPY config/ ./config/
COPY scripts/ ./scripts/
COPY monitoring/ ./monitoring/
COPY classname.txt ./classname.txt
COPY .env .env

# Create logs directory
RUN mkdir -p logs

# Change ownership of app directory
RUN chown -R app:app /app

# Switch to non-root user
USER app

# Make sure scripts in .local are usable for app user
ENV PATH=/home/app/.local/bin:$PATH

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application
CMD ["python", "-m", "uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]