version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: bean-classification-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MODEL_PATH=${MODEL_PATH:-./models}
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-10485760}
      - BATCH_MAX_SIZE=${BATCH_MAX_SIZE:-50}
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
    networks:
      - bean-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: bean-classification-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - bean-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional: Redis for caching (if needed in future)
  redis:
    image: redis:7-alpine
    container_name: bean-classification-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bean-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    profiles:
      - cache

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bean-classification-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - bean-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bean-classification-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - bean-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    profiles:
      - monitoring

  # Optional: Node Exporter for system metrics (to satisfy Prometheus scrape target)
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: bean-classification-node-exporter
    ports:
      - "9100:9100"
    networks:
      - bean-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  bean-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  logs: